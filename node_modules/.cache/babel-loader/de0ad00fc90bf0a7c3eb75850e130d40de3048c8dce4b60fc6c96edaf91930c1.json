{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\edrbe\\\\Desktop\\\\projects\\\\react-portfolio\\\\src\\\\components\\\\Nav\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { capitalizeFirstLetter } from '../../utils/helpers';\n\n// Here we are using object destructuring assignment to pluck off our variables from the props object\n// We assign them to their own variable names\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Nav(props) {\n  _s();\n  const {\n    currentTab,\n    handleTabChange\n  } = props;\n  useEffect(() => {\n    document.title = capitalizeFirstLetter(currentTab.name);\n  }, [currentTab]);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"nav nav-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"nav-item\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#about\",\n          onClick: () => handleTabChange('About')\n          // Check to see if the currentTab is `About`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          ,\n          className: currentTab === 'About' ? 'nav-link active' : 'nav-link',\n          children: \"About\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"nav-item\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#portfolio\",\n          onClick: () => handleTabChange('Portfolio')\n          // Check to see if the currentTab is `Portfolio`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          ,\n          className: currentTab === 'Portfolio' ? 'nav-link active' : 'nav-link',\n          children: \"Portfolio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"nav-item\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#contact\",\n          onClick: () => handleTabChange('Contact')\n          // Check to see if the currentTab is `Contact`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          ,\n          className: currentTab === 'Contact' ? 'nav-link active' : 'nav-link',\n          children: \"Contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"nav-item\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#resume\",\n          onClick: () => handleTabChange('Resume')\n          // Check to see if the currentTab is `Resume`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          ,\n          className: currentTab === 'Resume' ? 'nav-link active' : 'nav-link',\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(Nav, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Nav;\nexport default Nav;\nvar _c;\n$RefreshReg$(_c, \"Nav\");","map":{"version":3,"names":["React","useEffect","capitalizeFirstLetter","Nav","props","currentTab","handleTabChange","document","title","name"],"sources":["C:/Users/edrbe/Desktop/projects/react-portfolio/src/components/Nav/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { capitalizeFirstLetter } from '../../utils/helpers';\n\n// Here we are using object destructuring assignment to pluck off our variables from the props object\n// We assign them to their own variable names\nfunction Nav(props) {\n  const {\n    currentTab,\n    handleTabChange,\n\n  } = props;\n\n    useEffect(() => {\n      document.title = capitalizeFirstLetter(currentTab.name);\n    }, [currentTab]);\n\n\n  return (\n\n   \n    <nav>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n          <a\n            href=\"#about\"\n            onClick={() => handleTabChange('About')}\n            // Check to see if the currentTab is `About`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n            className={currentTab === 'About' ? 'nav-link active' : 'nav-link'}\n          >\n            About\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            href=\"#portfolio\"\n            onClick={() => handleTabChange('Portfolio')}\n            // Check to see if the currentTab is `Portfolio`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n            className={currentTab === 'Portfolio' ? 'nav-link active' : 'nav-link'}\n          >\n            Portfolio\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            href=\"#contact\"\n            onClick={() => handleTabChange('Contact')}\n            // Check to see if the currentTab is `Contact`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n            className={currentTab === 'Contact' ? 'nav-link active' : 'nav-link'}\n          >\n            Contact\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            href=\"#resume\"\n            onClick={() => handleTabChange('Resume')}\n            // Check to see if the currentTab is `Resume`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n            className={currentTab === 'Resume' ? 'nav-link active' : 'nav-link'}\n          >\n            Resume\n          </a>\n        </li>\n    </ul>\n    </nav>\n\n  );\n}\n\nexport default Nav;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,qBAAqB,QAAQ,qBAAqB;;AAE3D;AACA;AAAA;AACA,SAASC,GAAG,CAACC,KAAK,EAAE;EAAA;EAClB,MAAM;IACJC,UAAU;IACVC;EAEF,CAAC,GAAGF,KAAK;EAEPH,SAAS,CAAC,MAAM;IACdM,QAAQ,CAACC,KAAK,GAAGN,qBAAqB,CAACG,UAAU,CAACI,IAAI,CAAC;EACzD,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAGlB,oBAGE;IAAA,uBACA;MAAI,SAAS,EAAC,cAAc;MAAA,wBAC1B;QAAI,SAAS,EAAC,UAAU;QAAA,uBACpB;UACE,IAAI,EAAC,QAAQ;UACb,OAAO,EAAE,MAAMC,eAAe,CAAC,OAAO;UACtC;UAAA;UACA,SAAS,EAAED,UAAU,KAAK,OAAO,GAAG,iBAAiB,GAAG,UAAW;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAGjE;QAAA;QAAA;QAAA;MAAA,QACD,eACL;QAAI,SAAS,EAAC,UAAU;QAAA,uBACtB;UACE,IAAI,EAAC,YAAY;UACjB,OAAO,EAAE,MAAMC,eAAe,CAAC,WAAW;UAC1C;UAAA;UACA,SAAS,EAAED,UAAU,KAAK,WAAW,GAAG,iBAAiB,GAAG,UAAW;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAGrE;QAAA;QAAA;QAAA;MAAA,QACD,eACL;QAAI,SAAS,EAAC,UAAU;QAAA,uBACtB;UACE,IAAI,EAAC,UAAU;UACf,OAAO,EAAE,MAAMC,eAAe,CAAC,SAAS;UACxC;UAAA;UACA,SAAS,EAAED,UAAU,KAAK,SAAS,GAAG,iBAAiB,GAAG,UAAW;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAGnE;QAAA;QAAA;QAAA;MAAA,QACD,eACL;QAAI,SAAS,EAAC,UAAU;QAAA,uBACtB;UACE,IAAI,EAAC,SAAS;UACd,OAAO,EAAE,MAAMC,eAAe,CAAC,QAAQ;UACvC;UAAA;UACA,SAAS,EAAED,UAAU,KAAK,QAAQ,GAAG,iBAAiB,GAAG,UAAW;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAGlE;QAAA;QAAA;QAAA;MAAA,QACD;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACC;AAGV;AAAC,GA7DQF,GAAG;AAAA,KAAHA,GAAG;AA+DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}